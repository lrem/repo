#!/usr/bin/env perl -l
# Copyright (c) 2013, Remigiusz 'lRem' Modrzejewski
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

use warnings;
use strict;

# Commands that check whether we're in open checkout, with minimal work done
# Should return 0 in open checkout, non-0 elsewhere
# Key needs to be command name without arguments, to be used further
my %commands = (
    svn => 'svn info',
    fossil => 'fossil info',
    git => 'git status',
    hg => 'hg summary',
);

sub findVCS {
    my $found;
    for my $vcs (keys %commands) {
        system "$commands{$vcs} >/dev/null 2>&1";
        if ($? == 0) {
            die "Both $found and $vcs claim to be in charge!" if $found;
            $found = $vcs;
        }
    }
    die "No VCS here..." if not $found;
    return $found;
}

my $vcs = &findVCS;

if ($ARGV[0] =~ /^up/) {
    if ($vcs eq 'hg') {
        system 'hg pull';
    }
    if ($vcs eq 'git') {
        system 'git pull && git checkout'; # Git doesn't use "up"
        exit;
    }
}

if ($ARGV[0] eq 'commit' and $vcs eq 'git') {
    shift @ARGV;
    unshift @ARGV, 'commit', '-a';
}

if ($ARGV[0] eq 'log' and $vcs eq 'fossil') {
    shift @ARGV;
    unshift @ARGV, 'timeline';
}

if ($ARGV[0] =~ /^stat/ and $vcs eq 'svn') {
    system 'svn '.join(' ', @ARGV).' | grep -v "^\\?"';

} elsif ($ARGV[0] eq 'extra' and $vcs eq 'svn') {
    shift @ARGV;
    system 'svn status '.join(' ', @ARGV).' | grep "^\\?"';
    unshift @ARGV, 'extra';

} else {
    system $vcs, @ARGV;# or die "system $vcs @ARGV failed: $?";
}

if ($ARGV[0] eq 'commit') {
    if ($vcs eq 'git' or $vcs eq 'hg') {
        system $vcs, 'push';
    }
}
